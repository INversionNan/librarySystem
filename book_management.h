#ifndef BOOK_MANAGEMENT_GUARD__H
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

/*You can extend the structs (Book and BookList) defined in this head file;
  However, you may not change the function prototypes. 
  You are also free to add additional head files and data structures as needed. 
*/


typedef struct _Book {
    unsigned int id; //Book ID
    char *title; //book title
    char *authors; //comma separated list of authors
    unsigned int year; // year of publication
    unsigned int copies; //number of copies the library has
    struct _Book *next; //pointer to the next book element
}Book;

typedef struct _BookList {
    Book* list; // pointer to a list of struct Book.
    unsigned int length; // number of elements in the (Book*) List
}BookList;


typedef struct user{
    char user_pass[20];				//User passwords
    char user_num[10];				//User number
    char user_name[20];				//User name
    int user_bor[10];               //User borrow ID
    char user_bor_book[10][20];		//User borrow title
    struct user *next;				//Next User
}User;

typedef struct librarian{
    char lib_name[15];				//Librarian name
    char lib_acc[10];				//Librarian account
    char lib_pass[15];				//Librarian passwords
    struct librarian *next;			//Next librarian
}Librarian;


//extern User *User_h;
//extern Librarian *Lib_h;
//extern Book *Book_h;

//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file);

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file);

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
int add_book(Book book);

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(Book book);

//finds books with a given title.
//returns a BookList structure, where the field "list" is a list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_title (const char *title);

//finds books with the given authors.
//returns a Booklist structure, where the field "list" is a newly allocated list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_author (const char *author);

//finds books published in the given year.
//returns a Booklist structure, where the field "list" is a list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_year (unsigned int year);

void welcome();

void menu();

void user_choice();

void li_choice();

void add_choice();

void search_choice();

void borrow_choice();

void goodbye();

User *repeat(char *a ,char *b);

void reg();//register

void login(); //login

User *compare_name(char *login_name);

//void log_out();//logged out

User *User_load(); // load user

void user_save(); //Store the information in the student linked list in a file

void book_save();//tore the information in the book linked list in a file

void lib_save();//tore the information in the librarian linked list in a file

void search(); //Search for books

void display(); // Display all books

void password_input(char *password);

int check(char *password);

int verify(char *password);

Book *exist(int Book_id);

Book *exist_title(char *Book_title, char *Book_author);

Librarian *Lib_load();

//void lib();

void borrow(User *user_bo);

void return_book(User *user_re);

void Save();

//void load_User();

void display_borrow();

int judge(User *user_bo, char *Book_borrow);

int judge_Id(User *user_bo, int Book_borrowId);

Book *repeated(char *a ,char *b, unsigned int c);

Book *Book_h;
Book *Book_bor;
User *User_h;
Librarian *Lib_h;
BookList *list;

#endif